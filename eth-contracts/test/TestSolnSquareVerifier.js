// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var SolnSquareVerifier = artifacts.require('SolnSquareVerifier')
var Verifier = artifacts.require('Verifier')
var truffleAssert = require('truffle-assertions')
var proofJson = require('../../zokrates/code/square/proof.json')

contract('TestSolnSquareVerifier', async (accounts) => {
  const baseURI =
    'https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/'
  const account_one = accounts[0]
  const { proof, inputs } = proofJson

  before('setup', async () => {
    // Setup Verifier contract
    this.verifier = await Verifier.new()

    // Setup SolnSquareVerifier contract
    this.ssv = await SolnSquareVerifier.new(
      this.verifier.address,
      'SolnSquareVerifier Test',
      'SSVTST',
      baseURI,
    )
  })

  // Test if a new solution can be added for contract - SolnSquareVerifier
  describe('SolnSquareVerifier', () => {
    it('adds new solution after successful minting', async () => {
      const res = await this.ssv.mintVerified(
        account_one,
        1,
        proof.a,
        proof.b,
        proof.c,
        inputs,
        { from: account_one },
      )

      truffleAssert.eventEmitted(res, 'SolutionAdded', (event) => {
        assert.equal(event.prover, account_one)
        return true
      })
    })

    // Test if an ERC721 token can be minted for contract - SolnSquareVerifier
    it('mints valid ERC721 token with valid proof', async () => {
      await this.ssv.mintVerified(
        account_one,
        2,
        proof.a,
        proof.b,
        proof.c,
        inputs,
        { from: account_one },
      )

      const tokenOwner = await this.ssv.ownerOf(1)
      assert.equal(tokenOwner, account_one)
    })
  })
})
